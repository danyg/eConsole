/**
 * @overview 
 * @author Daniel Goberitz <daniel.goberitz@laviniainteractiva.com>
 */

var util = require('util'),
	toArray = util.toArray,
	myConsole = console,

	BLACK = 0,
	RED = 1,
	GREEN = 2,
	YELLOW = 3,
	BLUE = 4,
	PINK = 5,
	CYAN = 6,
	WHITE = 7,

	log,
	Logger,

Level = function(name, fg, bg, bold){
	if(bold === undefined){
		bold = false;
	}
	this.bold = bold;
	this.name = name;

	fg = (this.validFGNumber(fg)) ? fg : 30 + fg;
	bg = (this.validBGNumber(bg)) ? bg : 40 + bg;
	this.fg = (this.validFGNumber(fg)) ? fg : 31;
	this.bg = (this.validBGNumber(bg)) ? bg : 40;

	this.format = '\033[' + (bold ? '1' : '0') + ';' + fg.toString() + ';' + 
		bg.toString() + 'm[' + this.name.toUpperCase() + ']';
	;
};

Level.prototype = {
	validFGNumber: function(c){
		return (c > 29 && c < 38);
	},
	validBGNumber: function(c){
		return (c > 39 && c < 48);
	},
	getName: function(){return this.name;},
	getFormat: function(){return this.format;},
	getFG: function(){return this.FG;},
	getBG: function(){return this.BG;},
	isBold: function(){return this.bold ? true : false;}
};

Logger = {};

Logger.levels = [
	new Level('log', WHITE, BLACK, true),
	new Level('info', CYAN, BLACK, true),
	new Level('debug', GREEN, GREEN, true),
	new Level('warn', YELLOW, YELLOW, true),
	new Level('error', WHITE, RED, true),
	new Level('fatal', RED, RED, true)
];

Logger.levels.forEach(function(lvl){

	Logger[lvl.getName()] = function(){
		var args = Array.prototype.slice.call(arguments);
		return myConsole.log.apply( 
			myConsole, 
			[lvl.getFormat()].concat(args).concat('\033[0m') 
		);
	};

});
module.exports = Logger;