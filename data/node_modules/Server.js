/**
 * @overview 
 * @author Daniel Goberitz <daniel.goberitz@laviniainteractiva.com>
 */
var logger = require('logger'),
	socketIO = require('socket.io'),
	CLIArgs = require('CLIArgs'),
	GUI = require('GUI'),
	events = require('events')
;

CLIArgs.add('port', 'Puerto en el que se cargara el servidor Socket.IO, por default sera el 4040', true, 4040);
CLIArgs.bind('p', 'port');

module.exports = {
	io: null,

	publisher: new events.EventEmitter,
	on: function(){
		return this.publisher.on.apply(this.publisher, arguments);
	},
	emit: function(){
		return this.publisher.emit.apply(this.publisher, arguments);
	},

	open: function(){
		this.io = socketIO.listen( CLIArgs.has('port') || 4040 );
		var me = this;
		this.io.sockets.on('connection', function (socket) {
			me._newConnection(socket);
		});
	},
	
	getSocket: function(sID){
		return this.io.sockets.socket(sID);
	},
	
	getBroadcast: function(){
		return this.io.sockets.broadcast;
	},
	
	_newConnection: function(socket){
		var clientID;
		var me = this;

		socket.on('clientInfo', function(data){
			try{
				// cambiar por un objeto intermedio!!!
				clientID = GUI.serverToGUI.newClient(data, socket.id);
			}catch(e){
				logger.error(e);
			}
		});

		socket.on('log', function(data){
			try{
				GUI.serverToGUI.newRecord(socket.id, data);
			}catch(e){
				logger.error(e);
			}
		});

		socket.on('openedRecord', function(data){
			try{
				GUI.serverToGUI.newRecord(socket.id, data);
			}catch(e){
				logger.error(e);
			}
		});
		
		socket.on('execReturn', function(data){
			try{
				GUI.serverToGUI.newRecord(socket.id, data);
			}catch(e){
				logger.error(e);
			}
		});

		socket.emit('welcome');

		socket.on('disconnect', function(data){
			logger.log(socket.id + ' desconectado');
		});
	},
	
	close: function(){
		this.io.close();
	}
}