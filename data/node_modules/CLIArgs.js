/**
 * @overview 
 * @author Daniel Goberitz <daniel.goberitz@laviniainteractiva.com>
 */
var events = require('events')

var CLIArgs = {
	detected: [],
	argsData: {},
	argsHelp: {},
	binded: {},
	bindedInverse: {},
	publisher: new events.EventEmitter,
	
	on: function(){
		return this.publisher.on.apply(this.publisher, arguments);
	},
	emit: function(){
		return this.publisher.emit.apply(this.publisher, arguments);
	},
	
	add: function(argName, helpText, hasValue, defaultValue){
		this.argsHelp[argName] = helpText;
		if(hasValue === true){
			
			if(undefined === defaultValue){
				defaultValue = false;
			}
			
			this.argsData[argName] = defaultValue;
		}
		return this;
	},
	bind: function(shortArg, argName){
		if(shortArg.length === 1){
			this.binded[shortArg] = argName;
			if(undefined === this.bindedInverse[argName]){
				this.bindedInverse[argName] = [];
			}
			this.bindedInverse[argName].push(shortArg);
		}else{
			throw 'CLIArgs::bind only accepts a character to shortArg';
		}
	},
	process: function(){
		this.add('help', 'Show this Helps Page');
		this.bind('h', 'help');
		
		var me = this;
		process.argv.forEach(function(arg){
			me._processArg(arg);
		});

		// process Algorithm
		
		if(this.has('help')){
			// write help
			this.writeArgsHelp();
			process.exit();
		}
		
		this.emit('processed');
	},
	
	nextIsData: false,
	argToData: null,
	_processArg: function(arg){
		if(arg.charAt(0) === '-' && this.nextIsData){
			this.error('Se esperaban datos para el argumento ' + this.argToData);
			process.exit(1);
		}

		if(this.nextIsData){
			this.argsData[this.argToData] = arg;
			this.nextIsData = false;
		}
		if(arg.length === 2){
			this._processShortArg(arg.replace('-', ''));
			return;
		}else if(arg.charAt(0) === '-' && arg.charAt(1) === '-'){
			arg = arg.replace('--', '');
			this.detected.push(arg);
			if(undefined !== this.argsData[arg]){
				this.nextIsData = true;
				this.argToData = arg;
			}
		}
	},
	
	_processShortArg: function(shortArg){
		if(undefined !== this.binded[shortArg]){
			var arg = this.binded[shortArg];
			this._processArg('--' + arg);
		}
	},
	
	writeArgsHelp: function(){
		var arg, helpText;
		process.stdout.write('# HELP PAGE\n\n  Arguments:\n\n');
		for(arg in this.argsHelp){
			if( this.argsHelp.hasOwnProperty(arg)){
				var helpText = this.argsHelp[arg];
				
				process.stdout.write('  --' + arg);
				
				if(undefined !== this.argsData[arg]){
					process.stdout.write(' [VALUE]');
				}else{
					process.stdout.write('\t');
				}
				process.stdout.write('\t' + helpText);
				
				if(undefined !== this.bindedInverse[arg]){
					process.stdout.write('\n    Aliases: -' + this.bindedInverse[arg].join(', -'));
					
				}
				
				process.stdout.write('\n\n');
			}
		}
	},

	/**
	 * Comprueba si el argName se ha pasado por linea de comandos, si es un 
	 *  argumento que recoje un valor, se devolvera el valor dado.
	 *  false en caso que no se haya pasado dicho argumento.
	 * 
	 * @return {mix}
	 */
	has: function(argName){
		if(this.detected.indexOf(argName) !== -1){
			if(undefined !== this.argsData[argName]){
				return this.argsData[argName];
			}else{
				return true;
			}
		}else{
			if(undefined !== this.argsData[argName]){
				return this.argsData[argName];
			}
		}
		
		return false;
	}
};

module.exports = CLIArgs;