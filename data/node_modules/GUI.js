/**
 * @overview 
 * @author Daniel Goberitz <daniel.goberitz@laviniainteractiva.com>
 */
var logger = require('logger');
var CLIArgs = require('CLIArgs');
var events = require('events');

CLIArgs.add('noGUI', 'Si se pasa este parametro, solo se actuara como servidor, esperando consolas externas.');
CLIArgs.add('devtools', 'Define si se hablitaran las devtools para depurar la consola en si misma');

module.exports = {
	publisher: new events.EventEmitter,
	on: function(){
		return this.publisher.on.apply(this.publisher, arguments);
	},
	emit: function(){
		return this.publisher.emit.apply(this.publisher, arguments);
	},

	app: null,
	window: null,
	contentPath: null,
	toExport: {},
	serverToGUI: null,
	externalServer: null,
	
	hasGUI: function(){
		return !CLIArgs.has('noGUI');
	},

	exports: function(as, val){
		this.toExport[as] = val;
	},

	_initVars: function(){
		this.app = require('appjs');
		this.contentPath = process.cwd() + '/content';
	},

	initialize: function(externalServer){
		if(undefined !== externalServer){
			this.externalServer = externalServer;
		}
		this._initVars();		
		
		this.app.serveFilesFrom(this.contentPath);
		this.window = this.app.createWindow({
			width: 640, // stored.width
			height: 480, // stored.height
			icons: this.contentPath + '/icons'
		});

		this._setEvents();
	},
	
	_setEvents: function(){
		var me = this,
			window = this.window
		;
		this.window.on('create', function(){
			logger.log('Window Created');
			window.frame.show();
			window.frame.center(); // stored.x | stored.y
		});
		this.window.on('ready', function(){
			logger.log('Window Ready!');
			window.process = process;
			window.module = module;
			window.logger = logger;
			window.externalServer = me.externalServer;
			
			me._importVars();
			me.defineDevTools();
			
			new window.Event('app-ready');
			window.on('gui-ready', function(){
				me.serverToGUI = window.serverToGUI;
				me.emit('gui-ready');
			});
		});
		this.window.on('close', function(){
			logger.log("Window Closed");
			me.emit('gui-close');
		});
	},

	_importVars: function(){
		var varName;
		for(varName in this.toExport){
			if( this.toExport.hasOwnProperty(varName) ){
				this.window[varName] = this.toExport[varName];
			}
		}
	},
	
	defineDevTools: function(){
		if(CLIArgs.has('devtools')){
			var F12 = function (e){return e.keyIdentifier === 'F12';};
			var me = this;
			this.window.addEventListener('keydown', function(e){
				if(F12(e)){
					me.openDevTools();
				}
			});
		}
	},
	
	openDevTools: function(){
		this.window.frame.openDevTools();
	}
}