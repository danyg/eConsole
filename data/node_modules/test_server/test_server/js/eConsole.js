(function($){

	var socket = io.connect('http://' + window.location.host + ':4040/');
	socket.on('welcome', function(){
		socket.emit('clientInfo', {
			ua: navigator.userAgent,
			screen: {
				width: window.screen.width,
				height: window.screen.height
			},
			window: {
				height: window.innerHeight,
				width: window.innerWidth
			}
		});
	});
	socket.on('exec', function(data){
		Server.serverExec(data);
		
	});
	socket.on('openRecord', function(data){
		Server.openRecord(data);
		
	});
	
	var Server = {
		records: [],
		
		pushRecord: function(r){
			return this.records.push(r) - 1;
		},

		serverExec: function(data){
			var ret = eval(data.code);
			this.send(new Record('execReturn', ret));
		},
		
		openRecord: function(data){
			var record;
			if(undefined !== (record = this.records[ data.key ])){
				socket.emit(
					'openedRecord', 
					record.getMessage( record.getData(data.argNum, data.path), data.argNum, data.path )
				);		
			}else{
				socket.emit(
					'openedRecord', 
					{
						key: data.key,
						type: 'norecord',
						args: ['<NO RECORD>']
					}
				);
			}
		},
		
		send: function(record){
			socket.emit(record.getType(), record.getMessage());
		}
	};

	function Record(type, data){
		this.key = Server.pushRecord(this);
		this.type = type;
		if(undefined === data){
			this.data = undefined;
		}else{
			this.data = Array.prototype.slice.apply(data);
		}
	}
	
	Record.prototype = {
		getKey: function(){
			return this.key;
		},
		getType: function(){
			return this.type;
		},
		getData: function(argNum, path){
			var data = '<null>';

			if(undefined !== this.data[argNum]){
				if(undefined === path || path === ""){
					data = this.data[argNum];
				}else{
					path = path.split('.');
					var i;
					data = this.data[argNum];
					for(i=0;i<path.length;i++){
						if(undefined === data[ path[i] ]){
							break;
						}
						data = data[ path[i] ];
					}
				}

				if(data === undefined){
					data = '<undefined>';
				}
			}

			return data;
		},
		getMessage: function(data, argNum, path){
			if(undefined === data){
				data = this.data;
			}
			data = this.parseReturn( data );
			var ret = {
				type: this.type,
				key: this.key,
				args: data
			};
			
			if(undefined !== argNum){
				ret.argNum = argNum;
				ret.path = (undefined === path) ? '' : path;
			}
			
			return ret;
		},
		parseReturn: function(ret, open){
			if(undefined === open){
				open = true;
			}
			if(undefined === ret){
				ret = '<undefined>';
			}else if(null === ret){
				ret = '<null>';
			}else{
				switch(typeof(ret)){
					case 'function':
						ret = '<function>';
					break;
					case 'object':
						if(ret instanceof Array){
							if(open){
								ret = this.openRet(ret);
							}else{
								ret = '<array>';
							}
						}else{
							if(open){
								ret = this.openRet(ret);
							}else{
								ret = '<object>';
							}
						}
					break;
					default:
						ret = typeof(ret) + '|#|' + ret.toString();
				}
			}

			return ret;
		},
		openRet: function(obj){
			var i, retObj={};
			for(i in obj){
				if(obj.hasOwnProperty(i)){
					retObj[i] = this.parseReturn(obj[i], false);
				}else{
					if(undefined === retObj.proto){
						retObj.proto = {};
					}
					retObj.proto[i] = this.parseReturn(obj[i], false);
				}
			}
			return retObj;
		}
	};
	
	window.econsole = {
		log: function(){
			Server.send(new Record('log', arguments));
		}
	};

}(jQuery));